name: üß™ Run Tests and Publish Reports

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar tests autom√°ticamente cada d√≠a a las 9 AM
    - cron: '0 9 * * *'
  workflow_dispatch: # Permite ejecutar manualmente

# Permisos necesarios para GitHub Pages y commits
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: ‚öôÔ∏è Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: üì¶ Install dependencies
      run: npm ci
      
    - name: üé≠ Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: üß™ Run tests
      env:
        API_BASE_URL: ${{ secrets.API_BASE_URL }}
        API_TOKEN: ${{ secrets.API_TOKEN }}
      run: |
        npm test
      continue-on-error: true # Continuar aunque fallen tests
      
    - name: üìä Generate timestamp
      id: timestamp
      run: |
        echo "timestamp=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
        echo "date=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        
    - name: üìã Prepare reports directory
      run: |
        # Crear directorio de reportes
        New-Item -ItemType Directory -Force -Path "docs/reports"
        
        # Copiar reporte HTML principal (desde test-results/html-report)
        if (Test-Path "test-results/html-report") {
          Copy-Item -Path "test-results/html-report/*" -Destination "docs/reports/" -Recurse -Force
          Write-Host "‚úÖ HTML report copied successfully"
        } else {
          Write-Host "‚ö†Ô∏è HTML report not found at test-results/html-report"
        }
        
        # Copiar resultados JSON
        if (Test-Path "test-results/test-results.json") {
          Copy-Item -Path "test-results/test-results.json" -Destination "docs/reports/" -Force
          Write-Host "‚úÖ JSON results copied successfully"
        } else {
          Write-Host "‚ö†Ô∏è JSON results not found at test-results/test-results.json"
        }
        
        # Listar contenido para debug
        Write-Host "üìÅ Contents of docs/reports:"
        Get-ChildItem -Path "docs/reports" -Recurse | Format-Table Name, Length, LastWriteTime
      shell: pwsh
        
        Write-Host "‚úÖ All reports prepared successfully"
        
    - name: üìÑ Create dashboard HTML
      run: |
        # Copiar template y reemplazar placeholder
        Copy-Item -Path "dashboard-template.html" -Destination "docs/index.html" -Force
        $content = Get-Content "docs/index.html" -Raw
        $content = $content -replace "TIMESTAMP_PLACEHOLDER", "${{ steps.timestamp.outputs.date }}"
        $content | Out-File "docs/index.html" -Encoding UTF8 -NoNewline
        Write-Host "‚úÖ Dashboard HTML created"
      shell: pwsh
        
    - name: üöÄ Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        publish_branch: gh-pages
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        
    - name: üì§ Send Slack notification - Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "‚úÖ Endpoint Sentinel - Tests EXITOSOS",
            "attachments": [
              {
                "color": "good",
                "fields": [
                  {
                    "title": "üéØ Resultados de Ejecuci√≥n",
                    "value": "Estado: ‚úÖ TODOS LOS TESTS PASARON\nFecha: ${{ steps.timestamp.outputs.date }}\nTotal de casos: 30 (21 principales + 9 smoke tests)",
                    "short": false
                  },
                  {
                    "title": "üîó Enlaces Importantes",
                    "value": "‚Ä¢ <https://faradayy7.github.io/endpoint-sentinel/|üìä Ver Dashboard Completo>\n‚Ä¢ <https://faradayy7.github.io/endpoint-sentinel/reports/index.html|üìã Reporte HTML Detallado>\n‚Ä¢ <https://faradayy7.github.io/endpoint-sentinel/reports/test-results.json|üìÑ Descargar JSON>",
                    "short": false
                  },
                  {
                    "title": "üìà Informaci√≥n T√©cnica",
                    "value": "‚Ä¢ Endpoint: /api/media\n‚Ä¢ Autenticaci√≥n: ‚úÖ Validada\n‚Ä¢ Paginaci√≥n: ‚úÖ Funcionando\n‚Ä¢ Filtros: ‚úÖ Operativos",
                    "short": true
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: üì§ Send Slack notification - Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "‚ùå Endpoint Sentinel - Tests FALLARON",
            "attachments": [
              {
                "color": "danger",
                "fields": [
                  {
                    "title": "‚ö†Ô∏è Resultados de Ejecuci√≥n",
                    "value": "Estado: ‚ùå TESTS FALLARON\nFecha: ${{ steps.timestamp.outputs.date }}\nRevisi√≥n necesaria en el endpoint /api/media",
                    "short": false
                  },
                  {
                    "title": "üîó Enlaces para Diagn√≥stico",
                    "value": "‚Ä¢ <https://github.com/Faradayy7/endpoint-sentinel/actions|üîÑ Ver Action que Fall√≥>\n‚Ä¢ <https://faradayy7.github.io/endpoint-sentinel/|ÔøΩ Ver Dashboard>\n‚Ä¢ <https://faradayy7.github.io/endpoint-sentinel/reports/index.html|üìã Reporte Detallado>",
                    "short": false
                  },
                  {
                    "title": "üö® Acci√≥n Requerida",
                    "value": "1. Revisar logs del Action\n2. Verificar endpoint /api/media\n3. Comprobar autenticaci√≥n\n4. Validar par√°metros API",
                    "short": true
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
